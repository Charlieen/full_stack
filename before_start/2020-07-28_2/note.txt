1. how to use server environment
  1): xamppfiles/htdocs
  2) path map  real path to http://localhost/www/

2. How to use Promise

let p = new Promise((resolve,reject)=>{
  resolve();

  reject();
})

p.then(()=>{}, ()=>{})


ajax('use_data',function(user){
 if(user.is_vip){
 ajax('vip_news')
 }else {
 ajax('news')
 }
}) ;  Promise can not use this situation  logic process

回调： 背后有一个 常驻机制 在哪里 处理它。
回调 <--> 轮询
oBtn.onclick = function(){

}

1. Not call by the definiation
2: when was call , do not care;
------
1：Promise
2: Promise can not resolve
Promise.all();  and
Promise.race(); or

-------
generator -- 生成器 能暂停
----
yield:
1:  param
2: return value
-------
async/await

async function(){

PromiseAll

}

-----
review :
Syntactic sugar:

In computer science,
syntactic sugar is syntax within a programming language that is designed to
 make things easier to read or to express. It makes the language "sweeter" for
 human use: things can be expressed more clearly,
 more concisely, or in an alternative style that some may prefer.


Promise,
generator,
async/await

// Performance and function are not affected, convenience
ES6 compile
ES6 ->ES5  babel
Syntactic sugar

///
user experience
Performance:
- network performance
- execution performance;

Maintainability readability, engineering,
Robustness,

--
babel: polyfill tools
Babel includes a polyfill that includes a custom regenerator runtime and core-js.

This will emulate a full ES2015+ environment and is intended to be used in an application rather than a library/tool.
 This polyfill is automatically loaded when using babel-node.

This means you can use new built-ins like Promise or WeakMap, static methods like Array.from or Object.assign,
instance methods like Array.prototype.includes, and generator functions (provided you use the regenerator plugin).
 The polyfill adds to the global scope as well as native prototypes like String in order to do this.

Node:
1. Middleware
2. web backend (small scale)
3. tools base on nodejs
4.
---
底层原理：
http 原理
跨域
ajax
jsonp
websocket (nodejs)
