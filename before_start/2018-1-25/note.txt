native nodejs
1: server basic structure
2: response static resource
-----
1: file data 
2: database 
---
file upload  use post 
----
1: text/plain
2: application/x-www-form-urlencoded
3: multipart/form-data 


---

------WebKitFormBoundaryS3PIHuUmn7kjT3d0
Content-Disposition: form-data; name="name"

ee
------WebKitFormBoundaryS3PIHuUmn7kjT3d0
Content-Disposition: form-data; name="pass"


------WebKitFormBoundaryS3PIHuUmn7kjT3d0
Content-Disposition: form-data; name="f1"; filename="test.txt"
Content-Type: text/plain

aaa
bbb
ccc
ddd

------WebKitFormBoundaryS3PIHuUmn7kjT3d0--

--------------------------------------------------------------------------------------------------
<分隔符>\r\n
Content-Disposition: form-data; name="name"\r\n
\r\n
ee\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="pass"\r\n
\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="f1"; filename="test.txt"\r\n
Content-Type: text/plain\r\n
\r\n
aaa
bbb
ccc
ddd
\r\n
<分隔符>\r\n 
--------------------------------------------------------------------------------------------------
<分隔符>\r\n数据描述\r\n\r\n数据值\r\n,
<分隔符>\r\n数据描述\r\n\r\n数据值\r\n,
<分隔符>\r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n
<分隔符>-- 
--------------------------------------------------------------------------------------------------
Parsing data:
1: use <分隔符> cut down data

[
    空，
    \r\n数据描述\r\n\r\n数据值\r\n,
    \r\n数据描述\r\n\r\n数据值\r\n,
    \r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n,
    --
]

2: discard / throw away head and tail

[  
    \r\n数据描述\r\n\r\n数据值\r\n,
    \r\n数据描述\r\n\r\n数据值\r\n,
    \r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n,  
]
3: discard  each item  head \r\n  and tail \r\n

[
    数据描述\r\n\r\n数据值，
    数据描述\r\n\r\n数据值，
    数据描述1\r\n数据描述2\r\n\r\n<文件内容>

]
4：use first appear \r\n\r\n split  avoid in file content include  \r\n\r\n

general data:  [数据描述，数据值]

file data: [数据描述1\r\n数据描述2,<文件内容>]

5: determine  描述里面  有没有 \r\n；

exist : file  data
no exist : general data

6: 

-----------------------------------------------------------------------------

1： use Buffer data  
    1.1: search   indexOf()
    1.2  split    slice(a,b)
    1.3  substring
 
--------------------------------------------------------------
uuid,

--------------------------------------------------------------
瑕疵：
1： 错误，  等到所有数据都到达了才开始处理。
    正确：  收到一部分就开始解析一部分， 极大节约内存，  采用一个 缓冲队列。
2： readFile writeFile  问题

http.createServer((req,res)=>{
    fs.readFile(`www.${req.url}`,(err,data)=>{
        res.write(data)
    })
})

readFile  first real all data into memory ,then callback:
1: extremely memory intensive
2: Extremely inadequate use of resources 

--------------------------------------------------------------
stream:
read some-part send some-part
1: read stream      read file or net data   fs.createReadStream req
2: write stream     fs.creatWriteStream  res
3: read/ write stream   compress  encryption

--------------------------------------------------------------

1:Post  file data

2: stream  gz
--------------------------------------------------------------

3: database
4: Cache
5: Multiprocess

6: api , do project

--------------------------------------------------------------
stream  underlying principle :

product and custom pattern

--------------------------------------------------------------

面向字节的设备： 键盘   
面向流的设备：   网卡   块。







