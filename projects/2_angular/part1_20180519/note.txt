angular

v1.3+
v4
 angular  体系自身 提供的 都是以$开头
--------------------------------------------------------
1.data
2.
--------------------------------------------------------
 new Vue()

1.ng-model
2: {{}}
3: ng-app=""
4. ng-init=""
5. Vue: v-bind:title => :title  Angular : 属性直接 {{}}
6. ng-bind : 输出到标签里面。
7. v-for : ng-for --> ng-repeat  $index
8.事件
 v-on: @click="fn"  or @click="fn()"
 ng-click ng-mouseover;  ng-click="fn()"
9.controller  
let vm=new Vue({
    data:{}   // ng-init;
    methods:{},

})

ng-app="xxx"
1.范围
2.引入组件

ng-controller
1.引入一个controller 
--------------------------------------------------------
Angular 数据检查  早  脏检查  循环遍历， 性能低 , 尽可能少的检查数据。

只在两个地方进行检查：

1.函数执行完成时；
2.主动检查。

Vue 数据检查      晚    observe Proxy   性能高
this.a++


--------------------------------------------------------
异步不友好：
1.用angular自身的，能进行 脏检查。
2.xxx.$apply() 

$scope
$http
$interval $timeout
--------------------------------------------------------
MVVM:
1.双向绑定
v-model ng-model

2.依赖注入（依赖反转）
i:数组
ii:json
iii:依赖注入 -- 由函数决定要那些参数。
--------------------------------------------------------
ng4:
1.强依赖typescript
2.强调组件。
--------------------------------------------------------
启动器：
vue-cli
@angular/cli

--------------------------------------------------------
1.安装

2.创建工程

3.
--------------------------------------------------------
1.配置文件

2.启动文件
index.html
main.ts

3.组件

--------------------------------------------------------
组件的组成：
1.html
2.css
3.ts
--------------------------------------------------------
标注：
给编译器看的
--------------------------------------------------------
1. 数据
2. route
3. 组件间通信
--------------------------------------------------------
模块：
1.本身
  html
  css
  ts  declaration

2.输出
module

--------------------------------------------------------
module 文件： 重要
1.声明
  模块内部使用组件
2.imports
3.exports
  声明Component 外面用。
--------------------------------------------------------
module 文件
1.引入


2.输出

--------------------------------------------------------


