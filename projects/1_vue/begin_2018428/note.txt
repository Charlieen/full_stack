1.VM
2.bind
3.event
------------------------------------------------------------
1. event Modifiers
    @Event. {stop/prevent/capture/self/once/passive}
2. 计算后数据/属性  After calculation data/property    流式 - 反应式
   并不存在的数据，其实是个公式
   有缓存  
   应用：
   1.频繁使用的复杂公式
   2.需要监控的  （全局状态管理 的数据：登录，购物车）

   不是必须的。 可以在 methods -> 性能弱，每次都需要计算，没有缓存。

   简写：
    computed:{
                    result:function(){
                        return this.n1* this.n2;
                    }
                }

    computed:{
        result:{
            set:function(){},
            get:function(){}
        }
    }
------------------------------------------------------------
3.监听
    watch

------------------------------------------------------------
5. v-for
key 
数据自动 同步到视图
1. 把所有的元素都删了，重新生成一遍。 性能太差
2. 找出那些不一样的，  处理  ， 性能很高。

Vue 需要能把 数据 和 DOM 组件 对应起来。 提高性能。
:key="数据的ID"

虚拟DOM

{
    type:'li',
    title:'',
    children:[
        {}
    ]
}
------------------------------------------------------------
router:
 address change then call different code  地址变了，调用不用的代码。

 ------------------------------------------------------------
 vue.js
 vue-router

路由切换的是组件 -SPA
页面不变，变的是组件。

组件  -->json
 ------------------------------------------------------------
 about router:
 1. via hash  finish
 2. router-link just is  <a></a>
 3. router-view  placehold
 4. one component is whole VM
 ------------------------------------------------------------
 /article/:id

 ------------------------------------------------------------
1. watch--监听
2. $route 
 ------------------------------------------------------------
1.router -- 分工
2.参数  #/xxx/:x/:x/:x?a=xx&b=yy

$route.params
$route.query

3.事件
beforeRouteUpdate(to,from,next)
------------------------------------------------------------
1.嵌套路由
2.命名路由
    全路径
    json=>{name:'名字',params:{},query:{}}
------------------------------------------------------------
组件:
1.另一种写法，
2.数据通信
3.vue-cli

------------------------------------------------------------
$route 
$router 
